#!/usr/bin/env python3

#IMPORTANT!!! this file was generated by chat GPT to be used as reference in developing the 
# picture functionality... this is NOT my work and it was not completed

import rclpy
from rclpy.node import Node
from std_srvs.srv import Trigger
import cv2
import os

class TakePictureNode(Node):
    def __init__(self):
        super().__init__('take_picture_node')

        self.declare_parameter('camera_topic', '/camera/image_raw')
        self.declare_parameter('output_dir', '/tmp')

        self.camera_topic = self.get_parameter('camera_topic').value
        self.output_dir = self.get_parameter('output_dir').value

        # Camera image subscriber (assumes a camera is publishing images)
        self.image_sub = self.create_subscription(
            Image, self.camera_topic, self.image_callback, 10
        )

        # Service to take picture when an intruder is detected
        self.srv = self.create_service(Trigger, '/take_picture', self.take_picture_service)

        self.get_logger().info("TakePictureNode is ready.")

    def image_callback(self, msg):
        # This callback is called when an image is received from the camera
        self.latest_image = msg

    def take_picture_service(self, request, response):
        # Handle the service call to take a picture
        if hasattr(self, 'latest_image'):
            image = self.latest_image
            img_array = np.frombuffer(image.data, dtype=np.uint8)
            img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)

            timestamp = self.get_clock().now().to_msg().sec
            file_path = os.path.join(self.output_dir, f"intruder_{timestamp}.jpg")
            cv2.imwrite(file_path, img)

            response.success = True
            response.message = f"Image saved to {file_path}"
            self.get_logger().info(f"Image saved to {file_path}")
        else:
            response.success = False
            response.message = "No image received yet."
        
        return response


def main(args=None):
    rclpy.init(args=args)

    node = TakePictureNode()

    rclpy.spin(node)

    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
